name: Java CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    # 1) Start a Postgres container on the runner
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: mydb
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      # 2) Inject Springâ€™s datasource env vars so your tests point at the Postgres service
      - name: Run tests and generate coverage report
        working-directory: Fakezon
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/mydb
          SPRING_DATASOURCE_USERNAME: myuser
          SPRING_DATASOURCE_PASSWORD: mypassword
        run: mvn verify -e -X

      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: Fakezon/target/site/jacoco
